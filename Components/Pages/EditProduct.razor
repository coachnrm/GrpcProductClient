@page "/editproduct/{productId}"
@using Grpc.Core
@using GrpcProductService
@rendermode InteractiveServer
@inject Product.ProductClient ProductClient
@inject NavigationManager NavigationManager

<h3>Edit Product</h3>

@if (product == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@editRequest" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Product Name</label>
            <InputText id="name" @bind-Value="editRequest.Name" class="form-control" />
            <ValidationMessage For="@(() => editRequest.Name)" />
        </div>

        <div class="form-group">
            <label for="description">Description</label>
            <InputTextArea id="description" @bind-Value="editRequest.Description" class="form-control" />
            <ValidationMessage For="@(() => editRequest.Description)" />
        </div>

        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="editRequest.Price" class="form-control" />
            <ValidationMessage For="@(() => editRequest.Price)" />
        </div>

        <div class="form-group">
            <label for="tag">Tag</label>
            <InputText id="tag" @bind-Value="editRequest.Tag" class="form-control" />
            <ValidationMessage For="@(() => editRequest.Tag)" />
        </div>

        <div class="form-group mt-3">
            <button type="submit" class="btn btn-primary">Save</button>
            <button type="button" class="btn btn-secondary ms-2" @onclick="Cancel">Cancel</button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public string ProductId { get; set; }

    private ProductModel product;
    private UpdateProductRequest editRequest = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await ProductClient.GetProductAsync(new GetProductRequest { Id = ProductId });
            
            if (response.Success)
            {
                product = response.Product;
                editRequest = new UpdateProductRequest
                {
                    Id = product.Id,
                    Name = product.Name,
                    Description = product.Description,
                    Price = product.Price,
                    Tag = product.Tag
                };
            }
            else
            {
                Console.WriteLine($"Error loading product: {response.Message}");
                // Optionally navigate back or show error
            }
        }
        catch (RpcException ex)
        {
            Console.WriteLine($"Error loading product: {ex.Status}");
            // Handle gRPC specific errors
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await ProductClient.UpdateProductAsync(editRequest);
            
            if (response.Success)
            {
                NavigationManager.NavigateTo("/products");
            }
            else
            {
                Console.WriteLine($"Failed to update product: {response.Message}");
                // Show error to user
            }
        }
        catch (RpcException ex)
        {
            Console.WriteLine($"Error updating product: {ex.Status}");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/products");
    }
}
